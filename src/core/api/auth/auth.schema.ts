import Joi from "joi";

export default class AuthSchema {
  getConfiguration = Joi.object({ issuerUri: Joi.string().required() });
  authorize = Joi.object({
    response_type: Joi.string().required().description("MUST be code"),
    scope: Joi.string().required().description("MUST include openid"),
    issuer_state: Joi.string().optional().description("The state from the issuer"),
    state: Joi.string().optional().description("The state from the client"),
    client_id: Joi.string().required().description("The client identifier"),
    redirect_uri: Joi.string().required().description("The client's redirection endpoint"),
    nonce: Joi.string().description("A random value generated by the client"),
    code_challenge: Joi.string()
      .description("A challenge generated from the code_verifier"),
    code_challenge_method: Joi.string()
      .description("The method used to generate the code_challenge"),
    authorization_details: Joi.string()
      .description("The authorization details, including credential information"),
    client_metadata: Joi.string()
      //.required()
      .description("The client metadata, including supported response types and formats"),
    // Custom data
    issuerUri: Joi.string().required(),
    privateKeyJwk: Joi.string().required(),
    publicKeyJwk: Joi.string().required(),
  });
  // TODO: Check if it can be deleted
  authorization_details = Joi.array()
    .items(
      Joi.object({
        type: Joi.string().required().description("The type of authorization details"),
        format: Joi.string().required().description("The format of authorization details"),
        types: Joi.array()
          .items(Joi.string())
          .required()
          .description("The types of authorization details"),
      })
    )
    .required()
    .description("The authorization details, including credential information");
  client_metadata = Joi.object({
    authorization_endpoint: Joi.string()
      .required()
      .description("The authorization endpoint")
      .default("openid:"),
    response_types_supported: Joi.array()
      .items(Joi.string())
      .required()
      .description("The supported response types")
      .default(["vp_token", "id_token"]),
    vp_formats_supported: Joi.object({
      jwt_vp: Joi.object({
        alg_values_supported: Joi.array()
          .items(Joi.string())
          .description("The algorithm supported for VP formats using JWT VP")
          .default(["ES256"]),
      }),
      jwt_vc: Joi.object({
        alg_values_supported: Joi.array()
          .items(Joi.string())
          .description("The algorithm supported for VP formats using JWT VC")
          .default(["ES256"]),
      }),
    }
    ),
    scopes_supported: Joi.array()
      .items(Joi.string())
      .default(["openid"])
      .description("A JSON array containing a list of the OAuth 2.0 \"scope\" values that this authorization server supports"),
    subject_types_supported: Joi.array()
      .items(Joi.string())
      .default(["public"])
      .description("A JSON array containing a list of the Subject Identifier types that are supported"),
    id_token_signing_alg_values_supported: Joi.array()
      .items(Joi.string())
      .default(["ES256"])
      .description("A JSON array containing a list of the JWS \"alg\" values supported for the ID Token"),
    request_object_signing_alg_values_supported: Joi.array()
      .items(Joi.string())
      .default(["ES256"])
      .description("A JSON array containing a list of the JWS \"alg\" values supported by for Request Objects"),
    subject_syntax_types_supported: Joi.array().items(Joi.string()).default([
      "urn:ietf:params:oauth:jwk-thumbprint",
      "did:key:jwk_jcs-pub"
    ]).description("A JSON Array of supported DID methods and their possible sub types."),
    id_token_types_supported: Joi.array()
      .items(Joi.string())
      .default(["subject_signed_id_token"])
      .description("A JSON array of strings containing the list of ID Token types supported"),
  })
    .required()
    .description("The client metadata, including supported response types and formats");
  directPost = Joi.object({
    issuerUri: Joi.string().required(),
    privateKeyJwk: Joi.string().required(),
    id_token: Joi.string()
      .regex(/^ey/)
      .min(11)
      .custom((value, helpers) => {
        if ((value.match(/\./g) || []).length !== 2) {
          return helpers.error("any.invalid");
        }
        return value;
      }, 'Validation for exactly two "." characters in the string')
      .optional()
      .description(
        "ID Token signed by the DID document's authentication key. This will be used to prove the control of the DID."
      ),
    vp_token: Joi.string()
      .regex(/^ey/)
      .min(11)
      .custom((value, helpers) => {
        if ((value.match(/\./g) || []).length !== 2) {
          return helpers.error("any.invalid");
        }
        return value;
      }, 'Validation for exactly two "." characters in the string')
      .optional()
      .description(
        "VP Token signed by the DID document's authentication key."
      ),
    presentation_submission: Joi.string()
      .when(
        "vp_token",
        {
          is: Joi.exist(),
          then: Joi.required(),
          otherwise: Joi.optional(),
        }
      )
      .description("Presentation submission with information about the interpretation of a VP"),
    verifier_id: Joi.string().when(
      "vp_token",
      {
        is: Joi.exist(),
        then: Joi.required(),
        otherwise: Joi.optional(),
      }
    ),
  });
  token = Joi.object({
    grant_type: Joi.string()
      .required()
      .valid("authorization_code", "urn:ietf:params:oauth:grant-type:pre-authorized_code")
      .description("MUST be authorization_code or pre-authorised mode"),
    client_id: Joi.string().optional().description("The client identifier"),
    code: Joi.string().optional().description("The authorization code"),
    code_verifier: Joi.string().optional().description("The code verifier for the PKCE request"),
    user_pin: Joi.number().optional().description("Pin of the User"),
    "pre-authorized_code": Joi.string().optional().description("Code for pre-authorised flow"),
    // Custom data
    issuerUri: Joi.string().required(),
    privateKeyJwk: Joi.string().required(),
    publicKeyJwk: Joi.string().required(),
  }).options({ abortEarly: false }); // This is to ensure all errors are returned
}
