openapi: 3.0.0
info:
  title: Verificable Credential Service Documentation
  description: Verificable Credential Service Api Documentation
  version: "0.1.0"
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
servers:
  - url: /api
    description: Default Server
  - url: "{protocol}://{environment}:{port}/api"
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      port:
        default: "443"
      environment:
        default: localhost
    description: Custom Server
tags:
  - name: System
    description: Checks API and Blockchain connection status
  - name: Authorization
    description: Service that implements OIDC Authorization Server
  - name: Credentials
    description: Service that implements Verifiable Credentials Server

paths:
  # System
  /system/health:
    get:
      tags:
        - System
      responses:
        "200":
          description: OK
  # Authorization
  /auth/.well-known/openid-configuration:
    get:
      summary: OIDC Configuration
      description: >-
        Returns the static OIDC Configuration object
      tags:
        - Authorization
      operationId: get-configuration
      parameters:
        - name: issuerUri
          in: query
          description: The issuer URI
          required: true
          schema:
            type: string
          example: "https://my.example.issuer/issuer"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcConfiguration"
        "404":
          description: Not Found
  /auth/authorize:
    get:
      summary: Authorization endpoint
      description: Authorization endpoint to send the authorization_request and initiate the authorization flow
      operationId: authorizationRequest
      tags:
        - Authorization
      parameters:
        - name: issuerUri
          in: query
          description: The issuer URI
          required: true
          schema:
            type: string
          example: "https://my.example.issuer/issuer"
        - name: response_type
          in: query
          description: MUST be code
          schema:
            type: string
          required: false
          example: code
        - name: scope
          in: query
          description: MUST include openid
          schema:
            type: string
          required: false
          example: openid
          allowReserved: true
        - name: issuer_state
          in: query
          description: The state from the issuer
          schema:
            type: string
          required: false
          example: tracker=vcfghhj
        - name: state
          in: query
          description: The state from the client
          schema:
            type: string
          required: false
          example: client-state
        - name: client_id
          in: query
          description: The client identifier
          schema:
            type: string
          required: false
          example: did:key:z2dmzD81cgPx8Vki7JbuuMmFYrWPgYoytykUZ3eyqht1j9KbsEYvdrjxMjQ4tpnje9BDBTzuNDP3knn6qLZErzd4bJ5go2CChoPjd5GAH3zpFJP5fuwSk66U5Pq6EhF4nKnHzDnznEP8fX99nZGgwbAh1o7Gj1X52Tdhf7U4KTk66xsA5r
        - name: redirect_uri
          in: query
          description: The client's redirection endpoint
          schema:
            type: string
          required: false
          example: "openid://example.complete.uri"
        - name: nonce
          in: query
          description: A random value generated by the client
          schema:
            type: string
          required: false
          example: glkFFoisdfEui43
        - name: code_challenge
          in: query
          description: A challenge generated from the code_verifier
          schema:
            type: string
          required: false
          example: YjI0ZTQ4NTBhMzJmMmZhNjZkZDFkYzVhNzlhNGMyZDdjZDlkMTM4YTY4NjcyMTA5M2Q2OWQ3YjNjOGJlZDBlMS AgLQo=
        - name: code_challenge_method
          in: query
          description: The method used to generate the code_challenge
          schema:
            type: string
          required: false
          example: S256
        - name: authorization_details
          in: query
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: openid_credential
                      description: The type of authorization details
                    format:
                      type: string
                      description: The format of authorization details
                    types:
                      type: array
                      items:
                        type: string
                  required:
                    - type
                    - format
                    - types
          required: false
        - name: client_metadata
          in: query
          content:
            application/json:
              schema:
                type: object
                properties:
                  vp_formats_supported:
                    type: object
                    properties:
                      jwt_vp:
                        type: object
                        properties:
                          alg_values_supported:
                            type: array
                            items:
                              type: string
                            default: ["ES256"]
                      jwt_vc:
                        type: object
                        properties:
                          alg_values_supported:
                            type: array
                            items:
                              type: string
                            default: ["ES256"]
          required: false
        - name: request
          in: query
          description: Request object in JWT format
          required: false
          schema:
            type: string
      responses:
        # Not Standard
        200:
          description: Response with ID_Token request
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    description: The redirect URI containing the authorization code, state, and additional information
                    type: string
                    example: "openid://client_id=https%3A%2F%2Fmy-issuer.rocks%2Fauth&response_type=id_token&scope=openid&redirect_uri=https%3A%2F%2Fmy-issuer.rocks%2Fauth%2Fdirect_post&request=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImM0S3JlcEpYem1CTVctcW8ybnREQ3drVGdMbTJDYl81ZWFiemtsalRoXzAifQ.eyJpc3MiOiJodHRwczovL215LWlzc3Vlci5yb2Nrcy9hdXRoIiwiYXVkIjoiZGlkOmtleTp6MmRtekQ4MWNnUHg4VmtpN0pidXVNbUZZcldQZ1lveXR5a1VaM2V5cWh0MWo5S2JzRVl2ZHJqeE1qUTR0cG5qZTlCREJUenVORFAza25uNnFMWkVyemQ0Yko1Z28yQ0Nob1BqZDVHQUgzenBGSlA1ZnV3U2s2NlU1UHE2RWhGNG5Lbkh6RG56bkVQOGZYOTluWkdnd2JBaDFvN0dqMVg1MlRkaGY3VTRLVGs2NnhzQTVyIiwiZXhwIjoxNTg5Njk5MTYyLCJyZXNwb25zZV90eXBlIjoiaWRfdG9rZW4iLCJyZXNwb25zZV9tb2RlIjoiZGlyZWN0X3Bvc3QiLCJjbGllbnRfaWQiOiJodHRwczovL215LWlzc3Vlci5yb2Nrcy9hdXRoIiwicmVkaXJlY3RfdXJpIjoiaHR0cHM6Ly9teS1pc3N1ZXIucm9ja3MvYXV0aC9kaXJlY3RfcG9zdCIsInNjb3BlIjoib3BlbmlkIiwibm9uY2UiOiJuLTBTNl9XekEyTWoifQ.Vg615ydUGWQBM_o0mSoBePYTPyplbmcFv1oWa2mF3K-CeB9n6biCqmP-1w2jBLxSHVbIJlz_Ta0hc9pFWsewRQ"
        302:
          description: Redirect to the client's redirection endpoint
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/direct_post:
    post:
      summary: Direct Post Endpoint
      description: Endpoint for receiving the ID token in an x-www-form-urlencoded payload and returning a redirect with the code and state parameters.
      operationId: directPost
      tags:
        - Authorization
      requestBody:
        description: ID token payload
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                issuerUri:
                  description: The issuer URI
                  type: string
                  example: "https://my.example.issuer/issuer"
                id_token:
                  type: string
                  description: ID Token signed by the DID document's authentication key. This will be used to prove the control of the DID.
                vp_token:
                  type: string
                  description: VP Token signed by the DID document's authentication key.
                presentation_submission:
                  type: string
              required:
                - issuerUri
      responses:
        200:
          description: Successfully processed the token with no redirection.
          content: # Revisar. El 200 creo no debe devolver nada, pero si no lo declaro y no env√≠o algo falla el backend al procesarlo
            application/json:
              schema:
                type: object
        302:
          description: Successfully processed the token and redirecting.
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                    example: "openid://?code=SplxlOBeZQQYbYS6WxSbIA&state=client-state"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/token:
    post:
      summary: Token Endpoint
      description: Endpoint for exchanging the authorization code for an access token.
      operationId: exchangeToken
      tags:
        - Authorization
      requestBody:
        description: Authorization code and other required parameters
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              anyOf:
                - $ref: "#/components/schemas/TokenRequest"
                - $ref: "#/components/schemas/TokenRequestWithClientAssertion"
      responses:
        200:
          description: Successfully exchanged the authorization code for an access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ"
                  token_type:
                    type: string
                    example: bearer
                  expires_in:
                    type: integer
                    example: 86400
                  id_token:
                    type: string
                    example: "eyJodHRwOi8vbWF0dHIvdGVuYW50L..3Mz"
                  c_nonce:
                    type: string
                    example: "PAPPf3h9lexTv3WYHZx8ajTe"
                  c_nonce_expires_in:
                    type: integer
                    example: 86400
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/presentation-offer:
    post:
      summary: Presentation Offer Request Endpoint
      description: Endpoint for create a VP token request
      operationId: vp_token_req
      tags:
        - Authorization
      requestBody:
        description: Required parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                issuerUri:
                  description: The issuer URI
                  type: string
                  example: "https://my.example.issuer/issuer"
                verify_flow:
                  description: Vp Scope Action information
                  type: object # No desarrollo el objeto ya que es una comunicaci√≥n interna a desaparecer cuando accedamos a BD
                state:
                  description: User identifier
                  type: string
              required:
                - issuerUri
                - verify_flow
      responses:
        200:
          description: Successfully exchanged the authorization code for an access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  vp_token_request:
                    type: string
                    example: "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  # Credential
  /credentials:
    post:
      summary: Credentials Endpoint
      description: Endpoint for requesting credentials.
      operationId: requestCredentials
      tags:
        - Credentials
      requestBody:
        description: Credential request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                types:
                  type: array
                  items:
                    type: string
                  description: Credential types requested
                  example:
                    [
                      "VerifiableCredential",
                      "VerifiableAttestation",
                      "CTWalletSameInTime",
                    ]
                format:
                  type: string
                  description: Format of the returned credentials
                  enum:
                    - jwt_vc
                  example: jwt_vc
                proof:
                  type: object
                  properties:
                    proof_type:
                      type: string
                      enum:
                        - jwt
                      example: jwt
                    jwt:
                      type: string
                      minLength: 20
                      pattern: ^ey
                      example: eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVTMjU2Iiwia2lkIjoiZGlkOmtleTp6MmRtekQ4MWNnUHg4VmtpN0pidXVNbUZZcldQZ1lveXR5a1VaM2V5cWh0MWo5S2JzRVl2ZHJqeE1qUTR0cG5qZTlCREJUenVORFAza25uNnFMWkVyemQ0Yko1Z28yQ0Nob1BqZDVH (...) DNrbm42cUxaRXJ6ZDRiSjVnbzJDQ2hvUGpkNUdBSDN6cEZKUDVmdXdTazY2VTVQcTZFaEY0bktuSHpEbnpuRVA4Zlg5OW5aR2d3YkFoMW83R2oxWDUyVGRoZjdVNEtUazY2eHNBNXIiLCJhdWQiOiJodHRwczovL215LWlzc3Vlci5yb2Nrcy9hdXRoIiwiZXhwIjoxNTg5Njk5OTYyLCJub25jZSI6IlBBUFBmM2g5bGV4VHYzV1lIWng4YWpUZSJ9.1AK6J-nxkNvQiRehrP7Z3GmXEn-1I7na1ttIMr5cX_nfKSiMCN2-RxY01zAnB-JQ-l5sZEmzWiuvKgRzCD7fUA
                  required:
                    - proof_type
                    - jwt
                issuerUri:
                  description: The issuer URI
                  type: string
                  example: "https://my.example.issuer/issuer"
                issuerDid:
                  description: The issuer DID
                  type: string
                  example: "did:ebsi:zvHWX359A3CvfJnCYaAiAde"
                listId:
                  description: The ID of the list
                  type: string
                  example: "/credentials/status/list/1"
                listIndex:
                  description: The index of the VC in the statusList
                  type: number
                  example: 1
                listProxy:
                  description: The issuer DID
                  type: string
                  example: "fab84d2ac25f849bf1f44ec234334755174abe563f79a2bd8a7b0da3354bd8d6"
      responses:
        200:
          description: Successfully issued credential
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CredentialResponse"
                  - $ref: "#/components/schemas/DeferredCredentialResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /credential_deferred:
    post:
      summary: Deferred Credentials Endpoint
      description: Endpoint for requesting deferred credentials.
      operationId: requestDeferredCredentials
      tags:
        - Credentials
      requestBody:
        description: Deferred Credential request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                issuerUri:
                  description: The issuer URI
                  type: string
                  example: "https://my.example.issuer/issuer"
                issuerDid:
                  description: The issuer DID
                  type: string
                  example: "did:ebsi:zvHWX359A3CvfJnCYaAiAde"
      responses:
        200:
          description: Successfully issued credential
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CredentialResponse"
                  - $ref: "#/components/schemas/DeferredCredentialResponse"

        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /credentials/status:
    post:
      summary: Credentials Status
      description: Get the credential status
      operationId: statusCredentialRequest
      tags:
        - Credentials
      requestBody:
        description: Credential request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                issuerDid:
                  description: The issuer DID
                  type: string
                  example: "did:ebsi:zvHWX359A3CvfJnCYaAiAde"
                issuerUri:
                  description: The issuer URI
                  type: string
                  example: "https://my.example.issuer/issuer"
                listId:
                  description: The ID of the list
                  type: string
                  example: "/credentials/status/list/1"
                statusList:
                  description: Status List
                  type: string
                statisPurpose:
                  description: Status Purpose
                  type: string
                  enum:
                    - revocation
                    - suspension
                revocationType:
                  description: Revocation Type
                  type: string
                  enum:
                    - StatusList2021
      responses:
        200:
          description: Successfully issued credential
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CredentialResponse"
                  - $ref: "#/components/schemas/DeferredCredentialResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  # EBSI Accreditation
  /ebsi/accreditation/issuance:
    get:
      summary: EBSI Accreditations direct issuance
      description: Allows the issuance of an EBSI Accreditation
      operationId: ebsiDirectAccreditationIssuance
      tags:
        - Credentials
      parameters:
        - name: holderDid
          in: query
          required: true
          description: The DID of the VC to issue
          schema:
            type: string
        - name: issuerDid
          in: query
          required: true
          description: The DID of the VC to issue
          schema:
            type: string
        - name: issuerUri
          in: query
          required: true
          description: The DID of the VC to issue
          schema:
            type: string
        - name: accreditationType
          in: query
          required: true
          description: The specific type of the accreditation
          schema:
            type: string
            enum:
              - VerifiableAccreditationToAccredit
              - VerifiableAccreditationToAttest
              - VerifiableAuthorisationToOnboard
      responses:
        # Not Standard
        200:
          description: VC Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential:
                    type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenRequest:
      type: object
      properties:
        grant_type:
          type: string
          description: MUST be authorization_code or urn:ietf:params:oauth:grant-type:pre-authorized_code
          example: authorization_code
        client_id:
          type: string
          description: The client identifier
          example: "did:key:z2dmzD81cgPx8Vki7JbuuMmFYrWPgYoytykUZ3eyqht1j9KbsEYvdrjxMjQ4tpnje9BDBTzuNDP3knn6qLZErzd4bJ5go2CChoPjd5GAH3zpFJP5fuwSk66U5Pq6EhF4nKnHzDnznEP8fX99nZGgwbAh1o7Gj1X52Tdhf7U4KTk66xsA5r"
        code:
          type: string
          description: The authorization code
          example: SplxlOBeZQQYbYS6WxSbIA
        code_verifier:
          type: string
          description: The code verifier for the PKCE request
          example: random-secret
        user_pin:
          type: string
          description: User Pin
          example: "2876"
        pre-authorized_code:
          type: string
          description: The pre-authorization code
          example: eyJhbGciOiJFUzI1NiIsImtpZCI6ImF3emcxdU44WUFpUTR6RHVpM0tEN2ZQV1F3N093dTlyTHZGY1YxNlBaYU0ifQ.eyJhdXRob3JpemF0aW9uX2RldGFpbHMiOlt7InR5cGUiOiJvcGVuaWRfY3JlZGVudGlhbCIsImZvcm1hdCI6Imp3dF92YyIsImxvY2F0aW9ucyI6WyJodHRwczovL2lkZW50ZnktYmFja2VuZC1zdGFnaW5nLTJmZDg0M2U2MzdlOC5oZXJva3VhcHAuY29tLzQiXSwidHlwZXMiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJWZXJpZmlhYmxlQXR0ZXN0YXRpb24iLCJDVFdhbGxldFNhbWVQcmVBdXRob3Jpc2VkIl19XSwiaWF0IjoxNzAwMjIwOTk3LCJleHAiOjE3MDAyMjEyOTcsImlzcyI6Imh0dHBzOi8vaWRlbnRmeS1iYWNrZW5kLXN0YWdpbmctMmZkODQzZTYzN2U4Lmhlcm9rdWFwcC5jb20vNCIsImF1ZCI6Imh0dHBzOi8vaWRlbnRmeS1iYWNrZW5kLXN0YWdpbmctMmZkODQzZTYzN2U4Lmhlcm9rdWFwcC5jb20vNC9hdXRob3JpemUiLCJzdWIiOiJkaWQ6ZWJzaTp6SlEyalV4eGdEdlhBNlRlR2F0blJiaSJ9.eRTo-3PrVX_HyLsM5Jz8IJpgbFRaCXFTLqoNqdi02gelAtl0jJq3WuNp34RrF9vYaD1ZbPZrkGZcudiA1bSKAw
        issuerUri:
          description: The issuer URI
          type: string
          example: "https://my.example.issuer/issuer"
      required:
        - grant_type
        - issuerUri
      additionalProperties: true # ¬øredirect_uri?
    TokenRequestWithClientAssertion:
      allOf:
        - $ref: "#/components/schemas/TokenRequest"
        - type: object
          properties:
            client_assertion:
              type: string
              description: The assertion indicated by "client_assertion_type"
            client_assertion_type:
              type: string
              description: The assertion type
              enum:
                - urn:ietf:params:oauth:client-assertion-type:jwt-bearer
              example: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
          required:
            - client_assertion
            - client_assertion_type
    CredentialResponse:
      type: object
      additionalProperties: false
      properties:
        format:
          type: string
          example: jwt_vc
        credential:
          type: string
          example: "LUpixVCWJk0eOt4CXQe1NXK....WZwmhmn9OQp6YxX0a2L"
        c_nonce:
          type: string
          example: "fGFF7UkhLa"
        c_nonce_expires_in:
          type: integer
          example: 86400
      required:
        - format
        - credential
    DeferredCredentialResponse:
      type: object
      additionalProperties: false
      properties:
        acceptance_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGci..zaEhOOXcifQ
        c_nonce:
          type: string
          example: "fGFF7UkhLa"
        c_nonce_expires_in:
          type: integer
          example: 86400
      required:
        - acceptance_token
    OidcConfiguration:
      type: object
      properties:
        issuer:
          type: string
        authorization_endpoint:
          type: string
        token_endpoint:
          type: string
        jwks_uri:
          type: string
        scopes_supported:
          type: array
          items:
            type: string
        response_types_supported:
          type: array
          items:
            type: string
        response_modes_supported:
          type: array
          items:
            type: string
        grant_types_supported:
          type: array
          items:
            type: string
        subject_types_supported:
          type: array
          items:
            type: string
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
        request_parameter_supported:
          type: boolean
        request_uri_parameter_supported:
          type: boolean
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
        vp_formats_supported:
          type: object
          properties:
            jwt_vp:
              type: object
              properties:
                alg_values_supported:
                  type: array
                  items:
                    type: string
            jwt_vc:
              type: object
              properties:
                alg_values_supported:
                  type: array
                  items:
                    type: string
        subject_syntax_types_supported:
          type: array
          items:
            type: string
        subject_trust_frameworks_supported:
          type: array
          items:
            type: string
        id_token_types_supported:
          type: array
          items:
            type: string
      title: OidcConfiguration
    JwkPrivate:
      type: object
      required:
        - kty
      properties:
        kty:
          type: string
          description: Key type (e.g., RSA, EC)
          enum:
            - RSA
            - EC
        # RSA properties
        n:
          type: string
          description: RSA modulus (required for RSA)
        e:
          type: string
          description: RSA public exponent (required for RSA)
        d:
          type: string
          description: RSA private exponent (required for RSA private keys)
        p:
          type: string
          description: RSA secret prime factor (required for RSA private keys)
        q:
          type: string
          description: RSA secret prime factor (required for RSA private keys)
        dp:
          type: string
          description: RSA Chinese Remainder Theorem (CRT) coefficient (required for RSA private keys)
        dq:
          type: string
          description: RSA CRT coefficient (required for RSA private keys)
        qi:
          type: string
          description: RSA CRT coefficient (required for RSA private keys)
        # EC properties
        crv:
          type: string
          description: Elliptic curve name (e.g., P-256, P-384, P-521) (required for EC)
        x:
          type: string
          description: Elliptic curve x-coordinate (required for EC)
        y:
          type: string
          description: Elliptic curve y-coordinate (required for EC)
        # d:
        #   type: string
        #   description: Elliptic curve private key (required for EC private keys)
        kid:
          type: string
          description: Key ID, a unique identifier for the key
        alg:
          type: string
          description: Algorithm intended for use with the key (e.g., RS256, ES256)
        use:
          type: string
          description: Public key use (e.g., sig for signature, enc for encryption)
    JwkPublic:
      type: object
      required:
        - kty
      properties:
        kty:
          type: string
          description: Key type (e.g., RSA, EC)
          enum:
            - RSA
            - EC
        # RSA properties
        n:
          type: string
          description: RSA modulus (required for RSA)
        e:
          type: string
          description: RSA public exponent (required for RSA)
        # EC properties
        crv:
          type: string
          description: Elliptic curve name (e.g., P-256, P-384, P-521) (required for EC)
        x:
          type: string
          description: Elliptic curve x-coordinate (required for EC)
        y:
          type: string
          description: Elliptic curve y-coordinate (required for EC)
        kid:
          type: string
          description: Key ID, a unique identifier for the key
        alg:
          type: string
          description: Algorithm intended for use with the key (e.g., RS256, ES256)
        use:
          type: string
          description: Public key use (e.g., sig for signature, enc for encryption)
    JWK:
      type: object
      required:
        - kty
      properties:
        kty:
          type: string
          description: Key type (e.g., RSA, EC)
        alg:
          type: string
          description: Algorithm (e.g., RS256, ES256)
        use:
          type: string
          description: Public key use parameter (e.g., sig, enc)
        kid:
          type: string
          description: Key ID
        x5u:
          type: string
          description: X.509 URL
        x5c:
          type: array
          items:
            type: string
          description: X.509 certificate chain
        x5t:
          type: string
          description: X.509 certificate SHA-1 thumbprint
        x5t#S256:
          type: string
          description: X.509 certificate SHA-256 thumbprint
        n:
          type: string
          description: RSA modulus
        e:
          type: string
          description: RSA public exponent
        p:
          type: string
          description: RSA secret prime factor (should not be shared)
        q:
          type: string
          description: RSA secret prime factor (should not be shared)
        dp:
          type: string
          description: RSA Chinese Remainder Theorem (CRT) coefficient (should not be shared)
        dq:
          type: string
          description: RSA CRT coefficient (should not be shared)
        qi:
          type: string
          description: RSA CRT coefficient (should not be shared)
        crv:
          type: string
          description: Elliptic curve name (e.g., P-256, P-384, P-521)
        x:
          type: string
          description: Elliptic curve x-coordinate
        y:
          type: string
          description: Elliptic curve y-coordinate
        d:
          type: string
          description: Elliptic curve private key (should not be shared) OR RSA private exponent (should not be shared)
    # HTTP ERROR
    Error:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
